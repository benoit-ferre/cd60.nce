---
# Tests d'intégration complets pour cd60.nce.nce_site
# Couvre création (tous champs), idempotence, mises à jour de chaque propriété,
# effacement de chaînes, gestion de l'alias 'longtitude', rename, lookup, suppression,
# ET assertions de valeurs à chaque étape.

- name: "set facts from env"
  no_log: true
  ansible.builtin.set_fact:
    #nce_base_uri: "{{ lookup('env','NCE_BASE_URI') | default('https://weu.naas.huawei.com:18002', true) }}"
    #nce_validate_certs: "{{ (lookup('env','NCE_VALIDATE_CERTS') | default('false', true)) | bool }}"
    ## NOTE: si ces creds restent indéfinis, on stoppe le play proprement
    #nce_username: "{{ lookup('env','NCE_USERNAME') | default(omit, true) }}"
    #nce_password: "{{ lookup('env','NCE_PASSWORD') | default(omit, true) }}"

    # Jeu de données (surchargables par ENV)
    test_site_old_name: "{{ lookup('env','NCE_TEST_SITE_OLD') | default('CD60-Integration-Site-Temp', true) }}"
    test_site_new_name: "{{ lookup('env','NCE_TEST_SITE_NEW') | default('CD60-Integration-Site', true) }}"

    test_type_initial: "{{ (lookup('env','NCE_TEST_SITE_TYPE1') | default('AP,LSW', true)).split(',') }}"
    test_type_updated: "{{ (lookup('env','NCE_TEST_SITE_TYPE2') | default('AP', true)).split(',') }}"

    test_desc1: "{{ lookup('env','NCE_TEST_SITE_DESC1') | default('Initial description', true) }}"
    test_desc2: "{{ lookup('env','NCE_TEST_SITE_DESC2') | default('Updated by Ansible', true) }}"

    test_addr1: "{{ lookup('env','NCE_TEST_SITE_ADDR1') | default('1 Rue de la Préfecture', true) }}"
    test_addr2: "{{ lookup('env','NCE_TEST_SITE_ADDR2') | default('1 Rue de Paris', true) }}"

    test_lat1: "{{ lookup('env','NCE_TEST_SITE_LAT1') | default('49.4321', true) }}"
    test_lon1: "{{ lookup('env','NCE_TEST_SITE_LON1') | default('2.0833', true) }}"
    test_lat2: "{{ lookup('env','NCE_TEST_SITE_LAT2') | default('49.5000', true) }}"
    test_lon2: "{{ lookup('env','NCE_TEST_SITE_LON2') | default('2.2500', true) }}"

    test_contact1: "{{ lookup('env','NCE_TEST_SITE_CONTACT1') | default('David', true) }}"
    test_contact2: "{{ lookup('env','NCE_TEST_SITE_CONTACT2') | default('Alice', true) }}"

    test_tags1: "{{ (lookup('env','NCE_TEST_SITE_TAGS1') | default('abcd', true)).split(',') }}"
    test_tags2: "{{ (lookup('env','NCE_TEST_SITE_TAGS2') | default('alpha,beta,gamma', true)).split(',') }}"

    test_email1: "{{ lookup('env','NCE_TEST_SITE_EMAIL1') | default('ops@example.org', true) }}"
    test_email2: "{{ lookup('env','NCE_TEST_SITE_EMAIL2') | default('noc@example.org', true) }}"

    test_phone1: "{{ lookup('env','NCE_TEST_SITE_PHONE1') | default('15277431823', true) }}"
    test_phone2: "{{ lookup('env','NCE_TEST_SITE_PHONE2') | default('+33 1 23 45 67 89', true) }}"

    test_postcode1: "{{ lookup('env','NCE_TEST_SITE_PC1') | default('60000', true) }}"
    test_postcode2: "{{ lookup('env','NCE_TEST_SITE_PC2') | default('75001', true) }}"

    test_siteTag1: "{{ lookup('env','NCE_TEST_SITE_TAG1') | default('initial', true) }}"
    test_siteTag2: "{{ lookup('env','NCE_TEST_SITE_TAG2') | default('ops', true) }}"

    test_southAccName: "{{ lookup('env','NCE_TEST_SOUTHACC') | default('Public Default South Access', true) }}"

- name: "Skip when credentials are not provided (NCE_USERNAME/NCE_PASSWORD)"
  meta: end_play
  when: nce_username is not defined or nce_password is not defined

- name: "Obtain tenant token"
  no_log: true
  cd60.nce.nce_auth:
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    username: "{{ nce_username }}"
    password: "{{ nce_password }}"
  register: auth

- name: "Set token fact"
  no_log: true
  ansible.builtin.set_fact:
    nce_token: "{{ auth.token }}"

# --- Pré-nettoyage
- name: "Ensure test sites are absent (pre-clean) - old"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    object:
      name: "{{ test_site_old_name }}"
    state: absent
  register: pre_absent_old
  failed_when: false

- name: "Ensure test sites are absent (pre-clean) - new"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    object:
      name: "{{ test_site_new_name }}"
    state: absent
  register: pre_absent_new
  failed_when: false

# --- Création (tous champs)
- name: "Create site with all properties"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    selector: {}
    object:
      name: "{{ test_site_old_name }}"
      type: "{{ test_type_initial }}"          # REQUIRED on create
      southAccName: "{{ test_southAccName }}"  # utilisé uniquement à la création
      description: "{{ test_desc1 }}"
      address: "{{ test_addr1 }}"
      latitude: "{{ test_lat1 }}"
      longitude: "{{ test_lon1 }}"
      contact: "{{ test_contact1 }}"
      tag: "{{ test_tags1 }}"
      isolated: false
      email: "{{ test_email1 }}"
      phone: "{{ test_phone1 }}"
      postcode: "{{ test_postcode1 }}"
      siteTag: "{{ test_siteTag1 }}"
  register: create_full

- name: "Assert created"
  ansible.builtin.assert:
    that:
      - create_full is changed

# Extraire l'objet renvoyé par l'API si présent (success[0]), sinon fallback lookup
- name: "Extract created site object (from API payload or lookup fallback)"
  ansible.builtin.set_fact:
    site_after_create: >-
      {{
        (create_full.site.success[0])
          if (create_full is defined and create_full.site is defined
              and create_full.site is mapping
              and (create_full.site.success is defined)
              and (create_full.site.success | length > 0))
        else
          (query('cd60.nce.nce_lookup', 'sites', test_site_old_name,
                 base_uri=nce_base_uri, token=nce_token, validate_certs=nce_validate_certs) | first)
      }}

- name: "Assert created site values match expected"
  ansible.builtin.assert:
    that:
      - site_after_create.name == test_site_old_name
      - (site_after_create.address | default('')) == test_addr1
      - (site_after_create.description | default('')) == test_desc1
      - ((site_after_create.latitude | string) == (test_lat1 | string))
      - >
        ((site_after_create.longitude | default('') | string) == (test_lon1 | string)) or
        ((site_after_create.longtitude | default('') | string) == (test_lon1 | string))
      - (site_after_create.contact | default('')) == test_contact1
      - (site_after_create.tag | default([]) | sort) == (test_tags1 | sort)
      - (site_after_create.isolated | default(false)) == false
      - (site_after_create.email | default('')) == test_email1
      - (site_after_create.phone | default('')) == test_phone1
      - (site_after_create.postcode | default('')) == test_postcode1
      - (site_after_create.siteTag | default('')) == test_siteTag1
      - (site_after_create.type | default([]) | sort) == (test_type_initial | sort)
    fail_msg: "Created site mismatch: {{ site_after_create }}"

# Idempotence création
- name: "Create again (idempotent, same full payload)"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    selector: {}
    object:
      name: "{{ test_site_old_name }}"
      type: "{{ test_type_initial }}"
      southAccName: "{{ test_southAccName }}"
      description: "{{ test_desc1 }}"
      address: "{{ test_addr1 }}"
      latitude: "{{ test_lat1 }}"
      longitude: "{{ test_lon1 }}"
      contact: "{{ test_contact1 }}"
      tag: "{{ test_tags1 }}"
      isolated: false
      email: "{{ test_email1 }}"
      phone: "{{ test_phone1 }}"
      postcode: "{{ test_postcode1 }}"
      siteTag: "{{ test_siteTag1 }}"
  register: create_again

- name: "Assert idempotent"
  ansible.builtin.assert:
    that:
      - not (create_again is changed)

# --- Mises à jour couvrant chaque propriété
- name: "Update multiple mutable fields (incl. alias longtitude, list fields, booleans)"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    selector: {}
    object:
      name: "{{ test_site_old_name }}"
      description: "{{ test_desc2 }}"
      address: "{{ test_addr2 }}"
      latitude: "{{ test_lat2 }}"
      longtitude: "{{ test_lon2 }}"  # alias historique accepté
      contact: "{{ test_contact2 }}"
      tag: "{{ test_tags2 }}"
      isolated: true
      email: "{{ test_email2 }}"
      phone: "{{ test_phone2 }}"
      postcode: "{{ test_postcode2 }}"
      siteTag: "{{ test_siteTag2 }}"
      type: "{{ test_type_updated }}"
  register: update_all

- name: "Assert updated (diff present)"
  ansible.builtin.assert:
    that:
      - update_all is changed
      - update_all.diff is defined

# Vérifier la réalité côté NCE (si l'API n'a pas renvoyé l'objet final)
- name: "Lookup site after update"
  ansible.builtin.set_fact:
    site_after_update: "{{ query('cd60.nce.nce_lookup', 'sites', test_site_old_name, base_uri=nce_base_uri, token=nce_token, validate_certs=nce_validate_certs) | first }}"

- name: "Assert updated site values match expected"
  ansible.builtin.assert:
    that:
      - site_after_update.name == test_site_old_name
      - (site_after_update.address | default('')) == test_addr2
      - (site_after_update.description | default('')) == test_desc2
      - ((site_after_update.latitude | string) == (test_lat2 | string))
      - >
        ((site_after_update.longitude | default('') | string) == (test_lon2 | string)) or
        ((site_after_update.longtitude | default('') | string) == (test_lon2 | string))
      - (site_after_update.contact | default('')) == test_contact2
      - (site_after_update.tag | default([]) | sort) == (test_tags2 | sort)
      - (site_after_update.isolated | default(false)) == true
      - (site_after_update.email | default('')) == test_email2
      - (site_after_update.phone | default('')) == test_phone2
      - (site_after_update.postcode | default('')) == test_postcode2
      - (site_after_update.siteTag | default('')) == test_siteTag2
      - (site_after_update.type | default([]) | sort) == (test_type_updated | sort)
    fail_msg: "Updated site mismatch: {{ site_after_update }}"

# Idempotence après update
- name: "Run again with same updated payload (idempotent)"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    selector: {}
    object:
      name: "{{ test_site_old_name }}"
      description: "{{ test_desc2 }}"
      address: "{{ test_addr2 }}"
      latitude: "{{ test_lat2 }}"
      longtitude: "{{ test_lon2 }}"
      contact: "{{ test_contact2 }}"
      tag: "{{ test_tags2 }}"
      isolated: true
      email: "{{ test_email2 }}"
      phone: "{{ test_phone2 }}"
      postcode: "{{ test_postcode2 }}"
      siteTag: "{{ test_siteTag2 }}"
      type: "{{ test_type_updated }}"
  register: idem_after_update

- name: "Assert idempotent after update"
  ansible.builtin.assert:
    that:
      - not (idem_after_update is changed)

# --- Effacement de valeurs (strings -> "", listes -> [])
- name: "Clear optional strings and empty tag list"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    selector: {}
    object:
      name: "{{ test_site_old_name }}"
      description: ""
      siteTag: ""
      email: ""
      phone: ""
      postcode: ""
      tag: []
  register: clear_fields

- name: "Assert cleared fields (API payload may be minimal -> verify via lookup)"
  ansible.builtin.assert:
    that:
      - clear_fields is changed

- name: "Lookup site after clearing"
  ansible.builtin.set_fact:
    site_after_clear: "{{ query('cd60.nce.nce_lookup', 'sites', test_site_old_name, base_uri=nce_base_uri, token=nce_token, validate_certs=nce_validate_certs) | first }}"

- name: "Assert cleared values reflected on the resource"
  ansible.builtin.assert:
    that:
      - (site_after_clear.description | default('')) == ''
      - (site_after_clear.siteTag | default('')) == ''
      - (site_after_clear.email | default('')) == ''
      - (site_after_clear.phone | default('')) == ''
      - (site_after_clear.postcode | default('')) == ''
      - (site_after_clear.tag | default([])) == []
    fail_msg: "Clear mismatch: {{ site_after_clear }}"

# --- Check-mode pour changement détecté
- name: "Check-mode update (should report changed but not apply)"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    selector: {}
    object:
      name: "{{ test_site_old_name }}"
      address: "{{ test_addr2 }}-dryrun"
  register: dryrun
  check_mode: true

- name: "Assert dry-run would change"
  ansible.builtin.assert:
    that:
      - dryrun is changed

# --- Rename (selector.name -> object.name)
- name: "Rename using selector.name (old) -> object.name (new)"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    selector:
      name: "{{ test_site_old_name }}"
    object:
      name: "{{ test_site_new_name }}"
  register: rename

- name: "Assert renamed"
  ansible.builtin.assert:
    that:
      - rename is changed

- name: "Run with new name only (idempotent)"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    selector: {}
    object:
      name: "{{ test_site_new_name }}"
  register: idem_after_rename

- name: "Assert idempotent after rename"
  ansible.builtin.assert:
    that:
      - not (idem_after_rename is changed)

# --- Lookup plugin (et assertions finales de valeurs après rename)
- name: "query site via lookup plugin"
  ansible.builtin.set_fact:
    looked_site: "{{ query('cd60.nce.nce_lookup', 'sites', test_site_new_name, base_uri=nce_base_uri, token=nce_token, validate_certs=nce_validate_certs) }}"

- name: "Assert lookup returned exactly one item + expected values still present (where not cleared)"
  ansible.builtin.assert:
    that:
      - looked_site | length == 1
      - looked_site[0].name == test_site_new_name
      # Les champs vidés précédemment doivent rester vides
      - (looked_site[0].description | default('')) == ''
      - (looked_site[0].siteTag     | default('')) == ''
      - (looked_site[0].email       | default('')) == ''
      - (looked_site[0].phone       | default('')) == ''
      - (looked_site[0].postcode    | default('')) == ''
      - (looked_site[0].tag         | default([])) == []
    fail_msg: "Lookup mismatch: {{ looked_site }}"

# --- Suppression et idempotence suppression
- name: "Delete site (absent)"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    object:
      name: "{{ test_site_new_name }}"
    state: absent
  register: delete_new

- name: "Assert deleted"
  ansible.builtin.assert:
    that:
      - delete_new is changed

- name: "Delete again (idempotent)"
  cd60.nce.nce_site:
    token: "{{ nce_token }}"
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    object:
      name: "{{ test_site_new_name }}"
    state: absent
  register: delete_again

- name: "Assert delete idempotent"
  ansible.builtin.assert:
    that:
      - not (delete_again is changed)

# --- Révocation du token
- name: "Revoke token"
  no_log: true
  cd60.nce.nce_auth:
    base_uri: "{{ nce_base_uri }}"
    validate_certs: "{{ nce_validate_certs }}"
    token: "{{ nce_token }}"
    state: absent
  register: revoke
  failed_when: false
